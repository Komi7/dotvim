snippet fixme "fixme reminder" b!
# FIXME(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

snippet note "note reminder" b!
# NOTE(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

snippet todo "todo reminder" b!
# TODO(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

# header
snippet #!2 "Shebang header for python2 scripts" b
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
$0
endsnippet

snippet #!3 "Shebang header for python3 scripts" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
$0
endsnippet

# imports
snippet __f "__future__ future imports" b
from __future__ import print_function
$0
endsnippet

snippet fr "import functions" b
from ${1:package} import ${2:function}
endsnippet

snippet ft "import functools" b
import functools
endsnippet

snippet ifilter "import ifilter" b
from itertools import ifilter
endsnippet

snippet imap "import imap" b
from itertools import imap
endsnippet

snippet izip "import izip" b
from itertools import izip
endsnippet

snippet partial "import partial" b
from functools import partial
endsnippet

snippet starmap "import starmap" b
from itertools import starmap
endsnippet

snippet sys "import sys" b
import sys
endsnippet

snippet pp "import pp" b
from pprint import pprint as pp
endsnippet

# magic functions
snippet __n "__name__ test" b
if __name__ == "__main__":
    $0
endsnippet

snippet __i "__init__ stub" b
def __init__(self):
    $0
endsnippet

# unambiguous object hashable
snippet __r "__repr__ stub" b
def __repr__(self):
    return $0
endsnippet

# human readable, text represention; defaults to __repr__
snippet __s "__str__ stub" b
def __str__(self):
    return $0
endsnippet

snippet __l "__len__ stub" b
def __len__(self):
    $0
endsnippet

snippet __nz "__nonzero__ stub" b
def __nonzero__(self):
    ${0:return len(self) > 0}
endsnippet

# common functions
snippet main "main() Guido style" b!
def main(argv=None):
    if not argv:
        argv = sys.argv

    $0

if __name__ == "__main__":
    sys.exit(main())
endsnippet

snippet memoize "memoize" b!
from functools import wraps


def memoize(f):
    cache = {}

    def aux(*x):
        if x not in cache:
            cache[x] = f(*x)
        return cache[x]

    return aux

endsnippet

snippet memoize3 "memoize for Python 3" b!
from functools import wraps


def memoize(f):
    cache = {}
    wraps(f)
    def aux(*x):
        nonlocal cache
        if x not in cache:
            cache[x] = f(*x)
        return cache[x]
    return aux

endsnippet

snippet trace_wrapper "trace" b!
def trace(f):
    def aux(x):
        call_str = "{0}({1})".format(f.__name__, x)
        print("Calling {0} ...".format(call_str))
        result = f(x)
        print("... returning from {0} = {1}".format(
              call_str, result))
        return result
    return aux

endsnippet

# misc
snippet open "open file"
with open(${1:file}, 'r') as f:
    ${2:lines} = f.readlines()
    $0
endsnippet

snippet trace "test trace" b!
import ipdb; ipdb.set_trace()
endsnippet

snippet "deb(ug)?" "debug" br!
log.debug(${1:message}); print ${1/(.*).*/$1/}
endsnippet

snippet "cp(def|rint)" "color print definition" br!
def cprint(color, *args):
	from pprint import pprint as pp
	colors = dict(bw='\033[1;37m',r='\033[91m',g='\033[92m',b='\033[94m',y='\033[93m',p='\033[95m',n='\033[0m',)
	print colors[color],
	map(pp, args)
	print colors['n']

endsnippet

snippet cp "color print" b!
cprint('${2:bw}', ${1:message})
endsnippet

snippet pp "import pprint" b!
from pprint import pprint as pp
endsnippet

snippet pr "print()" b!
print($0)
endsnippet

snippet setup "TestCase setup" b!
	@T.setup
	def setup(self):
		self.biz_id = self.BusinessFactory.create(country='US')
		self.advertizer_id, self.biz_user_id = \
			self.AdvertiserFactory.create_with_biz_user(self.biz_id)
		self.biz_user = self.logic.BizUser.load_by_id(self.biz_user_id)
		self.biz_client.login(self.biz_user)
endsnippet
