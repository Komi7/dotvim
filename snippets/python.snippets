# header
snippet #!2 "Shebang header for python2 scripts" b
#!/usr/bin/env python2
# encoding: utf-8
$0
endsnippet

snippet #!3 "Shebang header for python3 scripts" b
#!/usr/bin/env python3
# encoding: utf-8
$0
endsnippet

# imports
snippet __f "__future__ future imports for Python 3" b
from __future__ import division, print_function
$0
endsnippet

snippet fr "import functions" b
from ${1:package} import ${2:function}
endsnippet

snippet ft "import functools" b
import functools
endsnippet

snippet sys "import sys" b
import sys
endsnippet

snippet pp "import pp" b
from pprint import pprint as pp
endsnippet

# magic functions
snippet __n "__name__ test" b
if __name__ == "__main__":
    $0
endsnippet

snippet __i "__init__ stub" b
def __init__(self):
    $0
endsnippet

# unambiguous object hashable
snippet __r "__repr__ stub" b
def __repr__(self):
    return $0
endsnippet

# human readable, text represention; defaults to __repr__
snippet __s "__str__ stub" b
def __str__(self):
    return $0
endsnippet

snippet __l "__len__ stub" b
def __len__(self):
    $0
endsnippet

snippet __nz "__nonzero__ stub" b
def __nonzero__(self):
    ${0:return len(self) > 0}
endsnippet

# common functions
snippet main "main() Guido style" b!
def main(argv=None):
    if not argv:
        argv = sys.argv

    $0

if __name__ == "__main__":
    sys.exit(main())
endsnippet

snippet def "function" b!
def ${1:function}(${2:arg1, arg2}):
    ${0:pass}

endsnippet

snippet memoize "memoize" b!
def memoize(f):
    cache = {}
    @functools.wraps(f)
    def aux(*x):
        nonlocal cache
        if x not in cache:
            cache[x] = f(*x)
        return cache[x]
    return aux

endsnippet

snippet trace "trace" b!
def trace(f):
    def aux(x):
        call_str = "{0}({1})".format(f.__name__, x)
        print("Calling {0} ...".format(call_str))
        result = f(x)
        print("... returning from {0} = {1}".format(
              call_str, result))
        return result
    return aux

endsnippet

# misc
snippet open "open file"
with open(${1:file}, 'r') as f:
    ${2:lines} = f.readlines()
    $0
endsnippet
