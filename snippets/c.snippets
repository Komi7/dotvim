snippet fixme "fixme reminder" b!
// FIXME(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

snippet note "note reminder" b!
// NOTE(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

snippet todo "todo reminder" b!
// TODO(`echo $USER`${2}|`!v strftime("%Y-%m-%d")`): ${1:desc}
endsnippet

snippet Inc "#include local header" b!
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include global header" b!
#include <${1:.h}>
endsnippet

snippet stdio "include stdio" b
#include <stdio.h>
endsnippet

snippet main "main function" b!
int main(int argc, char const* argv[]) {
    ${1:// code}
    return 0;
}
endsnippet

snippet for "for int loop (fori)" b!
for (int ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet while "while loop" b!
while (${1:/* condition */}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet if "if .. (if)" b!
if (${1:/* condition */}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if .. else (ife)" b!
if (${1:/* condition */}) {
    ${2:/* code */}
} else {
    ${3:/* else */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet asm "assembly code" !
__asm__ __volatile__(
        "$0\n\t"
        );
endsnippet
